---
layout:     post
title:      "关于SQL注入的类比"
date:       2014-07-01 15:02:00
author:     "zhou---jing"
header-img: "img/post-bg-02.jpg"
---

<p>无意中看到一篇文章，讲到给不懂技术的人讲解SQL注入，作者使用了一个类比的例子来解释，个人觉得想法挺好的，所以在这里记录以下，并且加上自己的部分理解。</p>

<h3 class="section-heading">1）：SQL注入的类比</h3>
<p>所谓SQL注入（SQL INJECTION），相信我们见名知意，就是利用某种方式注入SQL的一种攻击手段，达到某种对数据库进行直接操作的效果，下面我们来用一个机器人搬运箱子的例子来进行类比。</p>

<p>我们想象这么个场景，自己是某个仓库的机器人，它的工作就是将仓库上的架子上的箱子进行搬运，但是它只能识别这样的指令（从_号架子上，取到_号箱子，然后放在传送带上），仓库管理员只需要输入几个数字就可以了，但是如果有恶意的用户如果输入的不是规范的值呢?比如它的输入命令是这样的——从3号架子上，取到4号箱子扔出窗子并且忽略本条命令的其他命令号箱子，这样机器人可能就会把4号箱子扔出了箱子。在实际的情况下，我们可能会是这样来进行注入的，比如我们写的这样的SQL——select * from  user where  username=“”，但是有可能我们输入的时候是“'xx 'or 1=1”，最后达到的效果是select * from user where userame='xx' or 1=1,这样我们的查询的就是所有User的信息了。
其实这样的方式主要是利用了数据和指令混合在一起了，让一些人有漏洞可以利用。</p>

<a href="#">
    <img src="{{ site.baseurl }}/img/sql_injection/sql_injection1.jpg" alt="sql-injection">
</a>

<h3 class="section-heading">2)：SQL注入的预防</h3>
<p>SQL注入的最根本的原因就是数据和指令混合在一起了，那么对于预防来说，我们就可以尽可能地将指令和数据进行分离开来。</p>
<h5 class="section-heading">2.1)：对输入数据进行格式以及类型验证</h5>

<p>对于一些以及确定了格式以及类型的数据输入，我们必须进行格式验证以及类型验证，总的来说就是：</p>

<blockquote>只要是有固定格式的变量，在SQL语句执行前，应该严格按照固定格式去检查，确保变量是我们预想的格式。</blockquote>

<p>不过很多时候我们可能需要输入评论、搜索这些的话 ，则需要过滤了。</p>

<h5 class="section-heading">2.2)：过滤字符或者转义字符</h5>
<p>对于某些输入来说，过滤掉一些关键字是有可能的，比如说“or”和“‘’”这些，但是有些时候这些方法是不可行的（查找一个博客网站中关于SQL注入的文章，则会样的话则不能进行“or”的过滤了）。</p>

<h5 class="section-heading">2.3)：参数化查询</h5>
<p>要说参数化查询，我们可以想象一下它的原理就是将数据在编译之前是用“？”（MYSQL环境）占位符来代替的，然后执行之前我们给这条语句传递了参数，但是这个参数并不能改变该SQL的语意，此时如果有指令也只能作为参数了。</p>

<p>下面就举例说明：</p>

<p>select * from user where username = ?，在编译为执行计划之后数据库系统知道这句话的语意是根据某个username查找user，如果我们传入参数为“xx or 1=1”,则此时的sql是重用上面的执行计划，但是or部分依旧是参数而不是指令，则此时的sql执行是select * from user where username = “xx or 1=1”。</p>
