---
layout:     post
title:      "关于推送的一些事"
date:       2015-02-11 12:03:00
author:     "zhou---jing"
header-img: "img/post-bg-05.jpg"
---


<div>还想起在去年在实验室的时候，看项目中实现推送的方式就是Ajax轮训，然后慢慢才了解到服务端推送技术，然而项目中接触了Android之后一直以为Android和web的推送都是差不多的，直到最近才发现二者之间的联系以及区别：</div>

<blockquote>
<p>a）:区别：web端走的是Http协议，而Android推送则是基于 Socket，二者在OSI模型上处于不同的位置</p>
<p>b）:联系：Web端长连接推送基于Socket长连接，因为http协议是基于tcp/ip协议，而Socket则是tcp/ip的封装；</p>
</blockquote>

<div>我们都知道Http是无状态的，那么对于服务端推送来说一个很大的问题是“我该如何直到向哪个客户端推送呢？”，现在基本存在三种方式：</div>

<blockquote>
	<p>a）:基于客户端套接字的推送</p>
	<p>b）:基于长连接的推送实现</p>
	<p>c）:HTML5的推送实现</p>
</blockquote>

<div>基于客户端套接字的推送，现在也主要存在三种方式：</div>

<div>1）基于Flash</div>
<div>在浏览器安装了Flash之后，我们就可以使用Flash提供的套接字来进行推送，在AS中存在对于套接字的API，并且AS和js之间可以相互调用，所以说基于Flash的推送是可以实现的，但是缺点是很明显的——需要Flash插件;</div>

<div>2）基于Applet</div>
<div>在浏览器安装jre之后，我们也可以使用applet实现一个与服务器进行socket连接的客户端，然后同步此客户端实现和服务器通讯，从而达到服务器推的效果，并且applet也是可以操作js的，但是缺点是也是需要运行环境jre；</div>
<p></p>
<div>基于长连接或者类似长连接的推送实现，现在也主要存在三种方式：</div>
<div>1）基于iframe</div>
<div>在早期的版本，我们可以通过iframe中指定src，而src是一直都没有返回的，而http连接在没有返回的时候是不会进行关闭此连接，所以相当于此连接是个长连接，而我们在后台则可以根据这个这个连接的response来一直输出内容；当然这种方式的缺点在于对于服务器和客户端的资源占用比较严重，目前来说，浏览器对于长连接存在个数限制的，而这个链接会一直占用浏览器资源，更严重的是它需要在后台为每个长连接启动一个线程，这种方式对于服务器的资源占用是相当严重的；</div>

<div>2）Ajax长轮询</div>
<div>Ajax的出现让我们实现了异步请求，自此之后Ajax基本成了网站的“常客”，我们基本都会使用Ajax进行异步请求，而我们待会要说的就是和Ajax相关的，在上面所说的方式中，长连接是一直和服务器保持连接的，这样的话对于服务器的资源是很大的浪费，所以我们想只要在一次请求之前的连接是畅通的是可以了，所以就出现了Ajax长轮询的一种方式：简单来说，就是通过Ajax发送请求，然后在回调函数中再次发送请求，从而达到一种循环的结果，当然我们的消息可以放在后台的队列中，如果当前没有消息的话则关闭该连接，返回结果之后再次请求；</div>

<div>3）Http长连接</div>
<div>这个问题我们可以通过Http长连接来解决，在Http协议里面我们看下长连接该如何设置：在HTTP/1.0版本中，并没有官方的标准来规定Keep-Alive如何工作，因此实际上它是被附加到HTTP/1.0协议上，如果客户端浏览器支持Keep-Alive，那么就在HTTP请求头中添加一个字段 Connection: Keep-Alive， 当服务器收到附带有Connection: Keep-Alive的请求时，它也会在响应头中添加一个同样的字段来使用Keep-Alive。这样一来，客户端和服务器之间的HTTP连接就会被保持，不会断开（超过Keep-Alive规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接,在HTTP/1.1版本中，官方规定的Keep-Alive使用标准和在HTTP/1.0版本中有些不同，默认情况下所在HTTP1.1中所有连接都被保持，除非在请求头或响应头中指明要关闭：Connection: Close  ，这也就是为什么Connection: Keep-Alive字段再没有意义的原因。另外，还添加了一个新的字段Keep-Alive:，因为这个字段并没有详细描述用来做什么，可忽略它；</div>

<div>客户端代码如下：</div>
	<%@ page language="java" import="java.util.*" pageEncoding="utf-8"%>
	<%
	String path = request.getContextPath();
	String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";
	%>
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
	<html>
	  <head>
	    <base href="<%=basePath%>">
	    <title>My JSP 'index.jsp' starting page</title>
		<meta http-equiv="pragma" content="no-cache">
		<meta http-equiv="cache-control" content="no-cache">
		<meta http-equiv="expires" content="0">    
		<meta http-equiv="keywords" content="keyword1,keyword2,keyword3">
		<meta http-equiv="description" content="This is my page">
		<script type="text/javascript" src="js/comet4j.js"></script>
		<script type="text/javascript" src="http://code.jquery.com/jquery-1.11.2.min.js"></script>
	</head>
	  <body>
	  	<button id="start" onclick="start();">开始上线</button>
	  	<button id="stop" onclick="stop();">下线</button>
	  	<div id="group" style="width:450px;height:400px;border:1px solid #000;"></div>
	  	<input type="text" id="chart" style="width:400px;"/>
	  	<input type="button" onclick="onchart();" value="发送" id="chart"/>
	  	<script type="text/javascript">
			var group = $("#group");
			var chart = $("#chart");
			function start(){
				JS.Engine.start('/Comet/conn');
			}
			function stop(){
				JS.Engine.stop();
			}
			function onchart(){
				var text=chart.val();
				$.post("<%=basePath%>chart",{"content":text},function(result){
					//group.html(group.html()+"<br />"+text);
				});
			}
			JS.Engine.on({
			    start : function(cId, channelList, engine){
			      alert('连接已建立，连接ID为：' + cId);
			    },
			    stop : function(cause, cId, url, engine){
			      alert('连接已断开，连接ID为：' + cId + ',断开原因：' + cause + ',断开的连接地址：'+ url);
			    },
				single : function(text){
					alert(text);
				},
				group : function(text){
					group.html(group.html()+"<br />"+text);
				}
			});
		</script>
	  </body>
	</html>

<div>监听容器的启动并且注册通道，监听客户端上线，上线的话则通过服务器单推给客户端一条上线通知：</div>
	package com.example.listener;
	import javax.servlet.ServletContextEvent;
	import javax.servlet.ServletContextListener;

	import org.comet4j.core.CometConnection;
	import org.comet4j.core.CometContext;
	import org.comet4j.core.CometEngine;
	import org.comet4j.core.event.ConnectEvent;
	import org.comet4j.core.listener.ConnectListener;

	import com.example.manager.Manger;

	public class ContextListener implements ServletContextListener {
		public static final String DIANTODIAN = "single";//点对点
		public static final String GROUPCHART = "group";	//群聊
		@Override
		public void contextDestroyed(ServletContextEvent arg0) {
		}
		@Override
		public void contextInitialized(ServletContextEvent arg0) {
			CometContext cc = CometContext.getInstance();
			cc.registChannel(DIANTODIAN);
			cc.registChannel(GROUPCHART);
			CometEngine engine = CometContext.getInstance().getEngine();
			engine.addConnectListener(new JoinListener());
		}
	}
	class JoinListener extends ConnectListener {
		@Override
		public boolean handleEvent(ConnectEvent arg0) {
			CometConnection conn = arg0.getConn();
			System.out.println(conn.getClientIp()+"已上线");
			CometContext.getInstance().getEngine().sendTo(ContextListener.DIANTODIAN, conn, "欢迎上线");
			Manger.addClient(conn);
			return true;
		}
	}

<div>群聊实现：</div>
	package com.example.servlet;
	import java.io.IOException;
	import javax.servlet.ServletException;
	import javax.servlet.http.HttpServlet;
	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;
	import org.comet4j.core.CometContext;
	import com.example.listener.ContextListener;

	public class ChartServlet extends HttpServlet {

		@Override
		protected void doGet(HttpServletRequest req, HttpServletResponse resp)
				throws ServletException, IOException {
			String contentString=req.getParameter("content");
			CometContext.getInstance().getEngine().sendToAll(ContextListener.GROUPCHART, contentString);
		}

		@Override
		protected void doPost(HttpServletRequest req, HttpServletResponse resp)
				throws ServletException, IOException {
			doGet(req, resp);
		}

		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;

	}

<div>HTML5中WebSocket的实现：</div>
<div>1）HTML5一经推出就有“统一天下”之势，其中的HTML5的很多新特性功不可没，包括localStorage、WebSocket、Worker等等，相信在不久之后，很多技术会因这些特性而越来越简单，当然包括推送:</div>
<div>客户端实现:</div>
	<%@ page language="java" import="java.util.*" pageEncoding="utf-8"%>
	<%
		String path = request.getContextPath();
		String basePath = request.getScheme() + "://"
				+ request.getServerName() + ":" + request.getServerPort()
				+ path + "/";
	%>
	<!DOCTYPE HTML>
	<html>
		<head>
		<base href="<%=basePath%>">
		
		<title>My JSP 'index.jsp' starting page</title>
		<meta http-equiv="pragma" content="no-cache">
		<meta http-equiv="cache-control" content="no-cache">
		<meta http-equiv="expires" content="0">
		<meta http-equiv="keywords" content="keyword1,keyword2,keyword3">
		<meta http-equiv="description" content="This is my page">
		<script type="text/javascript"
			src="http://code.jquery.com/jquery-1.11.2.min.js"></script>
	</head>
	<script type="text/javascript">
		var ws = null;
		var group;
		var chart;
		$(function(){
			group = $("#group");
			chart = $("#chart");
		});
		
		function start() {
			ws = new WebSocket("ws://localhost:8080/WebSocket/chart");
			ws.onopen = function() {
				alert("连接成功");
			};
			ws.onmessage = function(evt) {
				console.info(group.html()+evt.data);
				group.html(group.html()+"<br />"+evt.data);
			};
			ws.onclose = function(evt) {
				alert("WebSocketClosed!");
			};
			ws.onerror = function(evt) {
				alert("WebSocketError!");
			};
		}		

		function onchart() {
			if (ws != null) {
				var text = chart.val();
				ws.send(text);
			}
		}
		
		function stop(){
			if(ws!=null){
				ws.close();
			}
		}
	</script>
	<body>
		<input type="button" value="上线" onclick="start();" />  <input type="button" value="下线" onclick="stop();" />
		<div id="group" style="width:450px;height:400px;border:1px solid #000;"></div>
		<input type="text" id="chart" style="width:400px;"/>
		<input type="button" onclick="onchart();" value="发送">
	</body>
	</html>

<div>服务端实现：</div>
	package com.zj.server;
	import java.io.IOException;
	import java.util.Set;
	import java.util.concurrent.CopyOnWriteArraySet;
	import java.util.concurrent.atomic.AtomicInteger;

	import javax.websocket.*;
	import javax.websocket.server.ServerEndpoint;
	@ServerEndpoint(value="/chart")
	//用了这个之后，你的服务地址为ws://localhost:port/projectName/chat01
	public class ChartServlet {
	  private static final AtomicInteger connectionIds = new AtomicInteger(0);
	  private static final Set<ChartServlet> connections =
	          new CopyOnWriteArraySet<ChartServlet>();
	  private final String nickname;
	  private Session session;
	  public ChartServlet() {
	      nickname = "游客ID：" + connectionIds.getAndIncrement();
	  }
	  @OnOpen
	  public void start(Session session) {
	      this.session = session;connections.add(this);
	      String message = String.format("嗨嗨，姑娘们，来接客了： %s %s", nickname, "has joined.");broadcast(message);
	  }
	  @OnClose
	  public void end() {
	      connections.remove(this);
	      String message = String.format("客官慢走，嘿嘿，还没付钱呢： %s %s",
	              nickname, "has disconnected.");broadcast(message);
	  }
	 @OnMessage
	 public void receive(String message) {
		String filteredMessage = String.format("您有新消息：%s: %s", nickname,
				message.toString());broadcast(filteredMessage);
	 }

		private static void broadcast(String msg) {
			for (ChartServlet client : connections) {
				try {
					client.session.getBasicRemote().sendText(msg);
				} catch (IOException e) {
					connections.remove(client);
					try {
						client.session.close();
					} catch (IOException e1) {
					}
					String message = String.format("* %s %s", client.nickname,
							"has been disconnected.");
					broadcast(message);
				}
			}
		}
	}

<div>总结来说，上面的一些方式对于规模比较小的消息推送还是可行的，但是对于大规模的消息服务肯定是不可行的，所以我们很容易联系到集群的实现，实现集群方式的推送服务又该如何设计？后面可以想想。</div>
