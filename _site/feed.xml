<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zhoujing的博客</title>
    <description>无愧过往  无畏将来</description>
    <link>https://zhou---jing.github.io/</link>
    <atom:link href="https://zhou---jing.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 22 Mar 2015 20:46:40 +0800</pubDate>
    <lastBuildDate>Sun, 22 Mar 2015 20:46:40 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>关于推送的一些事</title>
        <description>&lt;div&gt;还想起在去年在实验室的时候，看项目中实现推送的方式就是Ajax轮训，然后慢慢才了解到服务端推送技术，然而项目中接触了Android之后一直以为Android和web的推送都是差不多的，直到最近才发现二者之间的联系以及区别：&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;a）:区别：web端走的是Http协议，而Android推送则是基于 Socket，二者在OSI模型上处于不同的位置&lt;/p&gt;
&lt;p&gt;b）:联系：Web端长连接推送基于Socket长连接，因为http协议是基于tcp/ip协议，而Socket则是tcp/ip的封装；&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;我们都知道Http是无状态的，那么对于服务端推送来说一个很大的问题是“我该如何直到向哪个客户端推送呢？”，现在基本存在三种方式：&lt;/div&gt;

&lt;blockquote&gt;
	&lt;p&gt;a）:基于客户端套接字的推送&lt;/p&gt;
	&lt;p&gt;b）:基于长连接的推送实现&lt;/p&gt;
	&lt;p&gt;c）:HTML5的推送实现&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;基于客户端套接字的推送，现在也主要存在三种方式：&lt;/div&gt;

&lt;div&gt;1）基于Flash&lt;/div&gt;
&lt;div&gt;在浏览器安装了Flash之后，我们就可以使用Flash提供的套接字来进行推送，在AS中存在对于套接字的API，并且AS和js之间可以相互调用，所以说基于Flash的推送是可以实现的，但是缺点是很明显的——需要Flash插件;&lt;/div&gt;

&lt;div&gt;2）基于Applet&lt;/div&gt;
&lt;div&gt;在浏览器安装jre之后，我们也可以使用applet实现一个与服务器进行socket连接的客户端，然后同步此客户端实现和服务器通讯，从而达到服务器推的效果，并且applet也是可以操作js的，但是缺点是也是需要运行环境jre；&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div&gt;基于长连接或者类似长连接的推送实现，现在也主要存在三种方式：&lt;/div&gt;
&lt;div&gt;1）基于iframe&lt;/div&gt;
&lt;div&gt;在早期的版本，我们可以通过iframe中指定src，而src是一直都没有返回的，而http连接在没有返回的时候是不会进行关闭此连接，所以相当于此连接是个长连接，而我们在后台则可以根据这个这个连接的response来一直输出内容；当然这种方式的缺点在于对于服务器和客户端的资源占用比较严重，目前来说，浏览器对于长连接存在个数限制的，而这个链接会一直占用浏览器资源，更严重的是它需要在后台为每个长连接启动一个线程，这种方式对于服务器的资源占用是相当严重的；&lt;/div&gt;

&lt;div&gt;2）Ajax长轮询&lt;/div&gt;
&lt;div&gt;Ajax的出现让我们实现了异步请求，自此之后Ajax基本成了网站的“常客”，我们基本都会使用Ajax进行异步请求，而我们待会要说的就是和Ajax相关的，在上面所说的方式中，长连接是一直和服务器保持连接的，这样的话对于服务器的资源是很大的浪费，所以我们想只要在一次请求之前的连接是畅通的是可以了，所以就出现了Ajax长轮询的一种方式：简单来说，就是通过Ajax发送请求，然后在回调函数中再次发送请求，从而达到一种循环的结果，当然我们的消息可以放在后台的队列中，如果当前没有消息的话则关闭该连接，返回结果之后再次请求；&lt;/div&gt;

&lt;div&gt;3）Http长连接&lt;/div&gt;
&lt;div&gt;这个问题我们可以通过Http长连接来解决，在Http协议里面我们看下长连接该如何设置：在HTTP/1.0版本中，并没有官方的标准来规定Keep-Alive如何工作，因此实际上它是被附加到HTTP/1.0协议上，如果客户端浏览器支持Keep-Alive，那么就在HTTP请求头中添加一个字段 Connection: Keep-Alive， 当服务器收到附带有Connection: Keep-Alive的请求时，它也会在响应头中添加一个同样的字段来使用Keep-Alive。这样一来，客户端和服务器之间的HTTP连接就会被保持，不会断开（超过Keep-Alive规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接,在HTTP/1.1版本中，官方规定的Keep-Alive使用标准和在HTTP/1.0版本中有些不同，默认情况下所在HTTP1.1中所有连接都被保持，除非在请求头或响应头中指明要关闭：Connection: Close  ，这也就是为什么Connection: Keep-Alive字段再没有意义的原因。另外，还添加了一个新的字段Keep-Alive:，因为这个字段并没有详细描述用来做什么，可忽略它；&lt;/div&gt;

&lt;div&gt;客户端代码如下：&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;utf-8&quot;%&amp;gt;
&amp;lt;%
String path = request.getContextPath();
String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;
%&amp;gt;
&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;base href=&quot;&amp;lt;%=basePath%&amp;gt;&quot;&amp;gt;
    &amp;lt;title&amp;gt;My JSP &#39;index.jsp&#39; starting page&amp;lt;/title&amp;gt;
	&amp;lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&amp;gt;
	&amp;lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&amp;gt;
	&amp;lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&amp;gt;    
	&amp;lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&amp;gt;
	&amp;lt;meta http-equiv=&quot;description&quot; content=&quot;This is my page&quot;&amp;gt;
	&amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/comet4j.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script type=&quot;text/javascript&quot; src=&quot;http://code.jquery.com/jquery-1.11.2.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  	&amp;lt;button id=&quot;start&quot; onclick=&quot;start();&quot;&amp;gt;开始上线&amp;lt;/button&amp;gt;
  	&amp;lt;button id=&quot;stop&quot; onclick=&quot;stop();&quot;&amp;gt;下线&amp;lt;/button&amp;gt;
  	&amp;lt;div id=&quot;group&quot; style=&quot;width:450px;height:400px;border:1px solid #000;&quot;&amp;gt;&amp;lt;/div&amp;gt;
  	&amp;lt;input type=&quot;text&quot; id=&quot;chart&quot; style=&quot;width:400px;&quot;/&amp;gt;
  	&amp;lt;input type=&quot;button&quot; onclick=&quot;onchart();&quot; value=&quot;发送&quot; id=&quot;chart&quot;/&amp;gt;
  	&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
		var group = $(&quot;#group&quot;);
		var chart = $(&quot;#chart&quot;);
		function start(){
			JS.Engine.start(&#39;/Comet/conn&#39;);
		}
		function stop(){
			JS.Engine.stop();
		}
		function onchart(){
			var text=chart.val();
			$.post(&quot;&amp;lt;%=basePath%&amp;gt;chart&quot;,{&quot;content&quot;:text},function(result){
				//group.html(group.html()+&quot;&amp;lt;br /&amp;gt;&quot;+text);
			});
		}
		JS.Engine.on({
		    start : function(cId, channelList, engine){
		      alert(&#39;连接已建立，连接ID为：&#39; + cId);
		    },
		    stop : function(cause, cId, url, engine){
		      alert(&#39;连接已断开，连接ID为：&#39; + cId + &#39;,断开原因：&#39; + cause + &#39;,断开的连接地址：&#39;+ url);
		    },
			single : function(text){
				alert(text);
			},
			group : function(text){
				group.html(group.html()+&quot;&amp;lt;br /&amp;gt;&quot;+text);
			}
		});
	&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;监听容器的启动并且注册通道，监听客户端上线，上线的话则通过服务器单推给客户端一条上线通知：&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;package com.example.listener;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import org.comet4j.core.CometConnection;
import org.comet4j.core.CometContext;
import org.comet4j.core.CometEngine;
import org.comet4j.core.event.ConnectEvent;
import org.comet4j.core.listener.ConnectListener;

import com.example.manager.Manger;

public class ContextListener implements ServletContextListener {
	public static final String DIANTODIAN = &quot;single&quot;;//点对点
	public static final String GROUPCHART = &quot;group&quot;;	//群聊
	@Override
	public void contextDestroyed(ServletContextEvent arg0) {
	}
	@Override
	public void contextInitialized(ServletContextEvent arg0) {
		CometContext cc = CometContext.getInstance();
		cc.registChannel(DIANTODIAN);
		cc.registChannel(GROUPCHART);
		CometEngine engine = CometContext.getInstance().getEngine();
		engine.addConnectListener(new JoinListener());
	}
}
class JoinListener extends ConnectListener {
	@Override
	public boolean handleEvent(ConnectEvent arg0) {
		CometConnection conn = arg0.getConn();
		System.out.println(conn.getClientIp()+&quot;已上线&quot;);
		CometContext.getInstance().getEngine().sendTo(ContextListener.DIANTODIAN, conn, &quot;欢迎上线&quot;);
		Manger.addClient(conn);
		return true;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;群聊实现：&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;package com.example.servlet;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.comet4j.core.CometContext;
import com.example.listener.ContextListener;

public class ChartServlet extends HttpServlet {

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		String contentString=req.getParameter(&quot;content&quot;);
		CometContext.getInstance().getEngine().sendToAll(ContextListener.GROUPCHART, contentString);
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		doGet(req, resp);
	}

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;HTML5中WebSocket的实现：&lt;/div&gt;
&lt;div&gt;1）HTML5一经推出就有“统一天下”之势，其中的HTML5的很多新特性功不可没，包括localStorage、WebSocket、Worker等等，相信在不久之后，很多技术会因这些特性而越来越简单，当然包括推送:&lt;/div&gt;
&lt;div&gt;客户端实现:&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;utf-8&quot;%&amp;gt;
&amp;lt;%
	String path = request.getContextPath();
	String basePath = request.getScheme() + &quot;://&quot;
			+ request.getServerName() + &quot;:&quot; + request.getServerPort()
			+ path + &quot;/&quot;;
%&amp;gt;
&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
	&amp;lt;head&amp;gt;
	&amp;lt;base href=&quot;&amp;lt;%=basePath%&amp;gt;&quot;&amp;gt;
	
	&amp;lt;title&amp;gt;My JSP &#39;index.jsp&#39; starting page&amp;lt;/title&amp;gt;
	&amp;lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&amp;gt;
	&amp;lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&amp;gt;
	&amp;lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&amp;gt;
	&amp;lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&amp;gt;
	&amp;lt;meta http-equiv=&quot;description&quot; content=&quot;This is my page&quot;&amp;gt;
	&amp;lt;script type=&quot;text/javascript&quot;
		src=&quot;http://code.jquery.com/jquery-1.11.2.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
	var ws = null;
	var group;
	var chart;
	$(function(){
		group = $(&quot;#group&quot;);
		chart = $(&quot;#chart&quot;);
	});
	
	function start() {
		ws = new WebSocket(&quot;ws://localhost:8080/WebSocket/chart&quot;);
		ws.onopen = function() {
			alert(&quot;连接成功&quot;);
		};
		ws.onmessage = function(evt) {
			console.info(group.html()+evt.data);
			group.html(group.html()+&quot;&amp;lt;br /&amp;gt;&quot;+evt.data);
		};
		ws.onclose = function(evt) {
			alert(&quot;WebSocketClosed!&quot;);
		};
		ws.onerror = function(evt) {
			alert(&quot;WebSocketError!&quot;);
		};
	}		

	function onchart() {
		if (ws != null) {
			var text = chart.val();
			ws.send(text);
		}
	}
	
	function stop(){
		if(ws!=null){
			ws.close();
		}
	}
&amp;lt;/script&amp;gt;
&amp;lt;body&amp;gt;
	&amp;lt;input type=&quot;button&quot; value=&quot;上线&quot; onclick=&quot;start();&quot; /&amp;gt;  &amp;lt;input type=&quot;button&quot; value=&quot;下线&quot; onclick=&quot;stop();&quot; /&amp;gt;
	&amp;lt;div id=&quot;group&quot; style=&quot;width:450px;height:400px;border:1px solid #000;&quot;&amp;gt;&amp;lt;/div&amp;gt;
	&amp;lt;input type=&quot;text&quot; id=&quot;chart&quot; style=&quot;width:400px;&quot;/&amp;gt;
	&amp;lt;input type=&quot;button&quot; onclick=&quot;onchart();&quot; value=&quot;发送&quot;&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;服务端实现：&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;package com.zj.server;
import java.io.IOException;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.atomic.AtomicInteger;

import javax.websocket.*;
import javax.websocket.server.ServerEndpoint;
@ServerEndpoint(value=&quot;/chart&quot;)
//用了这个之后，你的服务地址为ws://localhost:port/projectName/chat01
public class ChartServlet {
  private static final AtomicInteger connectionIds = new AtomicInteger(0);
  private static final Set&amp;lt;ChartServlet&amp;gt; connections =
          new CopyOnWriteArraySet&amp;lt;ChartServlet&amp;gt;();
  private final String nickname;
  private Session session;
  public ChartServlet() {
      nickname = &quot;游客ID：&quot; + connectionIds.getAndIncrement();
  }
  @OnOpen
  public void start(Session session) {
      this.session = session;connections.add(this);
      String message = String.format(&quot;嗨嗨，姑娘们，来接客了： %s %s&quot;, nickname, &quot;has joined.&quot;);broadcast(message);
  }
  @OnClose
  public void end() {
      connections.remove(this);
      String message = String.format(&quot;客官慢走，嘿嘿，还没付钱呢： %s %s&quot;,
              nickname, &quot;has disconnected.&quot;);broadcast(message);
  }
 @OnMessage
 public void receive(String message) {
	String filteredMessage = String.format(&quot;您有新消息：%s: %s&quot;, nickname,
			message.toString());broadcast(filteredMessage);
 }

	private static void broadcast(String msg) {
		for (ChartServlet client : connections) {
			try {
				client.session.getBasicRemote().sendText(msg);
			} catch (IOException e) {
				connections.remove(client);
				try {
					client.session.close();
				} catch (IOException e1) {
				}
				String message = String.format(&quot;* %s %s&quot;, client.nickname,
						&quot;has been disconnected.&quot;);
				broadcast(message);
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;总结来说，上面的一些方式对于规模比较小的消息推送还是可行的，但是对于大规模的消息服务肯定是不可行的，所以我们很容易联系到集群的实现，实现集群方式的推送服务又该如何设计？后面可以想想。&lt;/div&gt;
</description>
        <pubDate>Wed, 11 Feb 2015 20:03:00 +0800</pubDate>
        <link>https://zhou---jing.github.io/2015/02/11/comet/</link>
        <guid isPermaLink="true">https://zhou---jing.github.io/2015/02/11/comet/</guid>
        
        
      </item>
    
      <item>
        <title>JAVA多线程</title>
        <description>&lt;h2 class=&quot;section-heading&quot;&gt;1):线程池的出现&lt;/h2&gt;

&lt;div&gt;我们知道多线程技术的作用大致分为三个方面：&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;a）:异步调用，避免阻塞&lt;/p&gt;
&lt;p&gt;b）:避免CPU空转，IO等请求时线程阻塞&lt;/p&gt;
&lt;p&gt;c）:提高CPU的利用率（对于多核来说）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;那么我们是不是尽量多创建线程呢？我想我们都会回答“不是”，因为我们都知道“物极必反”，那么多创建线程存在什么问题呢？&lt;/div&gt;

&lt;blockquote&gt;
	&lt;p&gt;a）:JAVA每个线程大约占用内存1M，创建多的线程则相对而言程序可用内存则减少&lt;/p&gt;
	&lt;p&gt;b）:线程同步是个很大的问题&lt;/p&gt;
	&lt;p&gt;c）:线程的创建和销毁是很占资源的&lt;/p&gt;
	&lt;p&gt;d）:CPU在线程之间切换导致CPU利用率下降&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么我们如果对并发真的需要这么多的线程呢？我们就没有办法了吗？回答当然不是，我们可以使用“线程池”，简单来说，线程池就是一个线程的池子，我们需要线程的时候就可以直接问它要，不用的时候则把线程返回给它，从而达到一种线程的重复利用。&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;2):线程池的JAVA API&lt;/h2&gt;

&lt;div&gt;下面我们来看下JAVA提供了哪些API封装了线程池相关的操作：&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_poll/thread-poll1.png&quot; alt=&quot;线程池&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;
	&lt;ol&gt;
	&lt;li&gt;Callable：不用介绍了，在线程创建的时候已经介绍了一部分&lt;/li&gt;
	&lt;li&gt;Future：Future为线程的执行结果票据，可以同步Futrue获取到异步线程的结果&lt;/li&gt;
	&lt;li&gt;ExecutorService：线程池的接口，其中execute和submit都是执行线程的接口，但是看返回值就知道它们的区别了，execute只是执行Runable，而submit则提交的任务可以有返回结果，submit会将runnable 物件包装成FutureTask,其run方法会捕捉被包装的Runnable Object的run方法抛出的Throwable异常，待submit方法所返回的的Future Object调用get方法时，将执行任务时捕获的Throwable Object包装成java.util.concurrent.ExecutionException来抛出&lt;/li&gt;
	&lt;li&gt;ScheduledExecutorService：重复执行任务类型的接口&lt;/li&gt;
	&lt;li&gt;ThreadPoolExecutor：ExecutorService的实现&lt;/li&gt;
	&lt;li&gt;SchedudedThreadPoolExecutor：SchedudedExecutorService的实现&lt;/li&gt;
	&lt;li&gt;ExecutorCompletionService：ExecutorCompletionService是CompletionService的实现类，ExecutorCompletionService和AbstractExcutorService者之间的区别在于ExecutorCompletionService会提供一个方法take（）来获取当前线程池中已经完成的Futrue对象，注意是已经完成了的，take方法相当于是生产者-消费者的消费者，如果没有已经完成的任务时候则take方法阻塞，而 AbstractExcutorService中的Futrue对象并不能保证是完成的，所以会造成通过Futrue来获取结果的时候将会造成阻塞。那么上面的区别会有什么区别呢？我们来看下一个应用场景就知道了。我们一般对多任务提交之后将会对Futrue对象进行保存（List），然后再主线程之中对该List进行便利获取结果值，而如果此时中间某一个结果并没有返回，那么则会造成后面已经完成的任务进行等待，浪费了返回时间，而如果通过take方法获取的Future对象一定是返回了结果的，所以可以直接进行操作，如果没有返回结果则只会阻塞该take方法。&lt;br /&gt;
	&lt;a href=&quot;#&quot;&gt;
	    &lt;img src=&quot;/img/thread_poll/thread-poll2.png&quot; alt=&quot;线程池&quot; /&gt;
	&lt;/a&gt;
	&lt;/li&gt;
	&lt;/ol&gt;
&lt;/div&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;3):线程池的配置&lt;/h2&gt;

&lt;div&gt;简单看了下API，现在我们学习下该如何创建线程池：&lt;/div&gt;

&lt;div&gt;
	&lt;ol&gt;
		&lt;li&gt;newFixedThreadPool：创建固定大小的线程，但是是每次提交一个任务则创建一个直到最大的线程数，如果线程因为异常而退出，则会新补充线程&lt;/li&gt;
		&lt;li&gt;newSingleThreadExecutor：一个线程的线程池，和上面的描述基本一样，除了最大的线程数是1以外&lt;/li&gt;
		&lt;li&gt;newCachedThreadPool：创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小&lt;/li&gt;
		&lt;li&gt;newSingleThreadScheduledExecutor：创建一个单线程的线程池。此线程池支持定时以及周期性执行务的需求&lt;/li&gt;
		&lt;li&gt;newScheduledThreadPool：创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求&lt;/li&gt;
	&lt;/ol&gt;
&lt;/div&gt;

&lt;div&gt;其实JAVA推荐我们使用上面的方法来创建线程池，但是其实最终的线程池的构造函数都是&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_poll/thread-poll4.png&quot; alt=&quot;线程池&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;我们来看下参数的含义：&lt;/div&gt;

&lt;div&gt;
	&lt;ol&gt;
		&lt;li&gt;corePoolSize - 池中所保存的线程数，包括空闲线程&lt;/li&gt;
		&lt;li&gt;maximumPoolSize-池中允许的最大线程数&lt;/li&gt;
		&lt;li&gt;keepAliveTime - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间&lt;/li&gt;
		&lt;li&gt;unit - keepAliveTime 参数的时间单位&lt;/li&gt;
		&lt;li&gt;workQueue - 执行前用于保持任务的队列。此队列仅保持由 execute方法提交的 Runnable任务&lt;/li&gt;
		&lt;li&gt;threadFactory - 执行程序创建新线程时使用的工厂&lt;/li&gt;
		&lt;li&gt;handler - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序&lt;/li&gt;
	&lt;/ol&gt;
&lt;/div&gt;

&lt;blockquote&gt;
	1）当池子大小小于corePoolSize就新建线程，并处理请求&lt;br /&gt;
	2）当池子大小等于corePoolSize，把请求放入workQueue中，池子里的空闲线程就去从workQueue中取任务并处理&lt;br /&gt;
	3）当workQueue放不下新入的任务时，新建线程入池，并处理请求，如果池子大小撑到了maximumPoolSize就用RejectedExecutionHandler来做拒绝处理&lt;br /&gt;
	4）另外，当池子的线程数大于corePoolSize的时候，多余的线程会等待keepAliveTime长的时间，如果无请求可处理就自行销毁。&lt;br /&gt;
&lt;/blockquote&gt;

&lt;div&gt;通过上面的参数，我们可以类比下现实生活中的场景——工厂&lt;/div&gt;

&lt;div&gt;如果工厂中的工人数小于corePoolSize，当有任务来的时候老板会再请工人进行处理任务（这是好老板），当工人的数刚超过corePoolSize的时候，老板会把任务放在workQueue等着工人完成任务后再进行处理（这是普通老板），如果此时还有任务而且workQueue放不下了（因为可能是定长的或者是无缓冲的Qunue）的话，则老板就会再借几个工人（辅助线程），如果此时工人们可以忙得过来还存在空闲的人，那么等keepAliverTime这么多时间的空闲工人还回去，如果还是忙不过来，则老板将会拒绝次任务。&lt;/div&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;4):线程池创建内部实现思路&lt;/h2&gt;

&lt;div&gt;在说各个方法对线程池的定制之前，我们需要先来了解下我们所需要的关于BlockingQueue的基础知识，顾名思义BlockingQueue是阻塞队列，它就是在Queue的基础上加上了两个二外的操作: 获取元素时等待队列变为非空，以及存储元素时等待空间变得可用。那这个有什么用呢？还记得我们生产者—消费者模型中仓库的实现吗？在那部分我们自己要控制临界状态，进行线程的wait以及唤醒，但是现在BlockingQueue已经帮我们把这些给实现了。他其中的put方法会阻塞线程，直到BlockingQueue没有满的时候，take方法阻塞线程直到BlockingQueue为非空的时候。&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_poll/thread-poll5.png&quot; alt=&quot;线程池&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;
	&lt;ol&gt;
		&lt;li&gt;ArrayBlockingQueue：顾名思义，通过Array来实现阻塞队列，通过维护一个定长数组来实现上述的需求，在take的时候等待ArrayBlockingQueue不为空，在put的时候直到ArrayBlockingQueue长度小于数组的长度，除了一个定长数组外，ArrayBlockingQueue内部还保存着两个整形变量，分别标识着队列的头部和尾部在数组中的位置&lt;/li&gt;
		&lt;li&gt;LinkedBlockingQueue：顾名思义即使通过Node来实现的，它也可以设置定长也可以是无限大，它和ArrayBlockingQueue的区别主要在于以下的方面：&lt;br /&gt;
		A）	ArrayBlockingQueue在生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此也意味着两者无法真正并行运行；&lt;br /&gt;
		B）	ArrayBlockingQueue在插入或删除元素时不会产生或销毁任何额外的对象实例（刚才说了它还有两个位置坐标的变量），而后者则会生成一个额外的Node对象&lt;/li&gt;
		&lt;li&gt;SynchronousQueue： SynchronousQueue是无界的，是一种无缓冲的等待队列，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加；可以认为SynchronousQueue是一个缓存值为1的阻塞队列，但是 isEmpty()方法永远返回是true，remainingCapacity() 方法永远返回是0，remove()和removeAll() 方法永远返回是false，iterator()方法永远返回空，peek()方法永远返回null&lt;/li&gt;
		&lt;li&gt;handler - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序&lt;/li&gt;
	&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_poll/thread-poll6.png&quot; alt=&quot;线程池&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;看完了上面BlockingQunue的实现类之后，我们接着看Executors如何对线程池进行定制的：&lt;/p&gt;

&lt;div&gt;newFixedThreadPool：我们来看下这个方法是如何对线程池来定制的从而实现固定大小的线程池；&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_poll/thread-poll7.png&quot; alt=&quot;线程池&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;固定大小的线程池的核心数和最大线程数是一样的，则只会存在coolPoolSize完成任务，完成不了的放在无限队列里面；排队方式采用无界队列;&lt;/p&gt;

&lt;div&gt;newSingleThreadExecutor：大小为1的固定线程池:&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_poll/thread-poll8.png&quot; alt=&quot;线程池&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;newCachedThreadPool：创建一个可根据需要创建新线程的线程池（相当于都是借来的工人）；&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_poll/thread-poll9.png&quot; alt=&quot;线程池&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;coolPoolSize：核心数为0，而最大数为无限的，在60s空闲后将会进行线程回收，使用的队列是SynchronousQueue，并且它的排队方式是直接提交;&lt;/p&gt;

&lt;div&gt;newScheduledThreadPool：创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求：&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_poll/thread-poll10.png&quot; alt=&quot;线程池&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;核心数是corePoolSize，最大值是无限，此时将不会借工人，因为归还时间是0，即相当于没有借，而队列是无界延迟阻塞队列DelayedWorkQueue。&lt;/div&gt;
</description>
        <pubDate>Fri, 07 Nov 2014 02:43:00 +0800</pubDate>
        <link>https://zhou---jing.github.io/2014/11/07/thread-pool/</link>
        <guid isPermaLink="true">https://zhou---jing.github.io/2014/11/07/thread-pool/</guid>
        
        
      </item>
    
      <item>
        <title>JAVA多线程</title>
        <description>&lt;p&gt;回调函数的实现方式其实就是利用的线程间的通讯，一般的模式是存在两个线程，一个主线程以及一个子线程，子线程完成操作后再执行定义的回调函数。而根据不同的场景我们可以对回调函数实现方式进行简单分类:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a）:同一时刻只有一个实例需要进行回调处理&lt;/p&gt;
&lt;p&gt;b）:同一时刻只有多个实例需要进行回调处理&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面我们看下例子：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_callback/thread-callback1.png&quot; alt=&quot;回调函数&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;而此时的思想就是通过一个子线程执行异步操作，然后调用已经实现回调接口的方法，从而达到回调。那么如果存在多个实例想要关注此业务呢？我们当然可以类似于上面通过开启多个子线程来实现，但是这样的话对于资源的浪费是很大的（也不说此时的业务的一致性（即每个子线程关注的是同一个业务，但是资源都是新开辟的，因为都是新开的线程）），其实此时的解决方法很简单，看上面的描述的话就是一个“一”和“多”的区别，“一”是用单个对象来保存的，那么“多”我们就可以使用数组或者什么的来进行存储就可以了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_callback/thread-callback2.png&quot; alt=&quot;回调函数&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其实多个实例需要回调也就是加上了个List进行存储而已，当然这种方式也可以满足一个实例进行回调的情况，只是觉得写起来有点大材小用了。但是这样会存在一个小问题，就是我们不能每时每刻添加异步回调任务，其实解决这个问题很简单，我们如果需要每时每刻都可以添加任务，则需要让子线程一直循环。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_callback/thread-callback3.png&quot; alt=&quot;回调函数&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总结来说，其实很多地方的回调都是使用的这样一种方式，比如Ajax的回调、Android的消息机制，这些或多或少都会使用到这样的一种方式。&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Sep 2014 20:00:00 +0800</pubDate>
        <link>https://zhou---jing.github.io/2014/09/24/thread-callback/</link>
        <guid isPermaLink="true">https://zhou---jing.github.io/2014/09/24/thread-callback/</guid>
        
        
      </item>
    
      <item>
        <title>JAVA多线程</title>
        <description>&lt;p&gt;线程同步的作用就是为了共享资源，在java中实现线程同步的方式有两种。&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;1):线程的同步方式&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;a)：加锁机制&lt;/p&gt;
&lt;p&gt;b）：Volatile关键字&lt;/p&gt;
&lt;p&gt;c）：信号量&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 class=&quot;section-heading&quot;&gt;1.1):加锁机制&lt;/h4&gt;
&lt;h5 class=&quot;section-heading&quot;&gt;1.1.1):synchronized&lt;/h5&gt;
&lt;p&gt;对于同步方法来说，不论是实例方法还是静态方法，加的锁都是在对象上加的，其他访问该方法的线程必须获取得到该对象的锁，而同步代码块的作用范围更小，在执行完同步代码块之后将锁释放，也就是说在同步代码块之前的代码不是同步的，多个线程可以访问。&lt;/p&gt;

&lt;h5 class=&quot;section-heading&quot;&gt;1.1.2):java5之后提供的锁对象&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_synchronization/thread-synchronization1.png&quot; alt=&quot;线程同步&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_synchronization/thread-synchronization2.png&quot; alt=&quot;线程同步&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;而ReadLock以及WriteLock则是Reentranteadriteock的内部类；&lt;/p&gt;
&lt;p&gt;ReentrantLock：可重入锁，简单来说就是同一个线程在获取该锁之后如果线程再次获取该锁这是可以的，但是如果是不可重入锁的话，则会造成死锁（不过现在没有找到不可重入的锁示例），可重入锁的实现方式就是为每个锁记录当前锁的持有线程以及计数器，当某一线程请求成功后，JVM会记下锁的持有线程，并且将计数器置为1；此时其它线程请求该锁，则必须等待；而该持有锁的线程如果再次请求这个锁，就可以再次拿到这个锁，同时计数器会递增；当线程退出同步代码块时，计数器会递减，如果计数器为0，则释放该锁。 而相对的则有不可重入锁，它在再次申请锁的时候会导致死锁，因为它以及占着资源而且还需要申请资源，但是申请的资源已经被自己占着了，下面来看下示例：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_synchronization/thread-synchronization3.png&quot; alt=&quot;线程同步&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_synchronization/thread-synchronization4.png&quot; alt=&quot;线程同步&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;注意其中的while(isLocked)循环，它又被叫做“自旋锁”。当isLocked为true时，调用lock()的线程在wait()调用上阻塞等待。为防止该线程没有收到notify()调用也从wait()中返回（也称作虚假唤醒）， 这个线程会重新去检查isLocked条件以决定当前是否可以安全地继续执行还是需要重新保持等待，而不是认为线程被唤醒了就可以安全地继续执行了。如果 isLocked为false，当前线程会退出while(isLocked)循环，并将isLocked设回true，让其它正在调用lock()方法 的线程能够在Lock实例上加锁。&lt;/p&gt;
&lt;p&gt;那么我们如何修改该锁，而可以把它变为可重用性呢？分析上面可以知道，主要的问题在于“自旋锁”让申请资源的线程等待，并且在上面我们已经知道了可重入锁的实现原理，那么简单更改锁就可以实现此效果了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_synchronization/thread-synchronization5.png&quot; alt=&quot;线程同步&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ReadLock：读锁是共享锁，即几个线程可以共享该锁；&lt;/p&gt;
&lt;p&gt;WriteLock：写锁是排它锁，即只有一个线程可以获取该锁；&lt;/p&gt;

&lt;h4 class=&quot;section-heading&quot;&gt;1.2):Volatile&lt;/h4&gt;
&lt;p&gt;而对于Volatile关键字来说，它的作用是保证每次读取该关键字修饰的变量的值都是从主存中读取，所以它能保证每次读取的变量值都是最新的，但是不保证是同步的。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_synchronization/thread-synchronization6.png&quot; alt=&quot;线程同步&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一般来说，处理变量都包括从主存读——copy变量副本保存在本线程——使用变量——写回主存，而Volatile关键字的变量每次访问的时候都是从主存读取过来的，它们之间的区别就在于线程在访问一般变量时候只是从主存读取一次，而Volatile关键字的变量则是读取多次，个人感觉Volatile关键字的变量和引用变量相似。&lt;/p&gt;

&lt;h4 class=&quot;section-heading&quot;&gt;1.3):信号量&lt;/h4&gt;

&lt;p&gt;信号量在一定情况下（当许可数量为1个线程的时候）也可以达到同步的作用，也可达到共享资源的目的，下面我们来看下关于信号量的介绍；它的介绍如下：&lt;/p&gt;

&lt;blockquote&gt;执行操作时可以首先获得许可【semaphore.acquire();】，并在使用后释放许可 【semaphore.release();】。如果没有许可，那么acquire方法将会一直阻塞直到有许可（或者直到被终端或者操作超时）。&lt;/blockquote&gt;

&lt;p&gt;由上面定义我们可以看到信号量的作用：可以用来控制同时访问某个特定资源的操作数量，或者某个操作的数量，简单来说，它可以控制资源的访问数量但是不能控制资源的数量。&lt;/p&gt;

&lt;p&gt;下面来看下例子，这个例子是在生产者-消费者基础更改，添加需求为：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a）：每次只能最多两个消费者进行消费或者等待消费（等待生产，仓库库存为空）&lt;/p&gt;
&lt;p&gt;b）：每次只能最多三个生产者进行生产或者等待生产（等待消费，仓库是满的）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_synchronization/thread-synchronization7.png&quot; alt=&quot;线程同步&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_synchronization/thread-synchronization8.png&quot; alt=&quot;线程同步&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;3):死锁&lt;/h2&gt;

&lt;h4 class=&quot;section-heading&quot;&gt;3.1):死锁的介绍&lt;/h4&gt;

&lt;p&gt;对象加锁的方式可以使得线程之前访问资源是同步的，但是有的时候加锁的顺序将会带来错误，就比如我们常常看见的死锁问题。&lt;/p&gt;

&lt;blockquote&gt;简单来说，死锁的问题就是我占用着资源并且还要请求你的资源，但是你占用着自己的资源并且还需要我的资源，从而造成了一种循环等待的情形，这样就造成栏死锁。&lt;/blockquote&gt;

&lt;p&gt;根据上面描述，我们可以找到死锁产生的四个条件:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a）：循环等待（你等我 我等你）&lt;/p&gt;
&lt;p&gt;b）：互斥条件（我和你共同竞争同一资源）&lt;/p&gt;
&lt;p&gt;c）：不可抢占条件（你和我的资源只能自己释放而不能你进行抢占我的资源）&lt;/p&gt;
&lt;p&gt;d）：占有且申请条件（竞争的资源需要申请，并且自己已经占有部分资源而且还需要申请新的资源）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面我们来看下死锁的例子：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_synchronization/thread-synchronization9.png&quot; alt=&quot;线程同步&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_synchronization/thread-synchronization10.png&quot; alt=&quot;线程同步&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h4 class=&quot;section-heading&quot;&gt;3.2):死锁的预防&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;a）：可以选择在每个线程中让申请资源的顺序是一样的，如刚才的例子来说，可以选择把两个线程中的申请资源顺序都是t1,t2;&lt;/p&gt;
&lt;p&gt;b）：将竞争的资源进行包装，所以需要用到其中资源的必须现申请该包装的锁，如刚才的例子，可以选择把t1和t2共同组成一个资源，则不论申请t1和t2的时候都需对该资源加锁。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 18 Sep 2014 20:00:00 +0800</pubDate>
        <link>https://zhou---jing.github.io/2014/09/18/thread-synchronization/</link>
        <guid isPermaLink="true">https://zhou---jing.github.io/2014/09/18/thread-synchronization/</guid>
        
        
      </item>
    
      <item>
        <title>JAVA多线程</title>
        <description>&lt;p&gt;这种模型在现实生活中比较常见的模型，下面我们可以来看看这种模型的实现；此模型的需求是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a）：消费者必须在仓库中有产品的时候才能进行消费&lt;/p&gt;
&lt;p&gt;b）：生产者在仓库中没有产品的时候才能被告知进行生产&lt;/p&gt;
&lt;p&gt;c）：生产者在仓库满的时候则停止生产&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;分析之后，我们知道生产者和消费者是两个独立的线程，它们分别进行消费和生产操作，对于仓库提供出来的接口对产品进行生产或者消费的api是需要进行同步的，因为这是共享资源。示例代码如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_producerandconsumer/thread-producerandconsumer1.png&quot; alt=&quot;生产者——消费者模型&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_producerandconsumer/thread-producerandconsumer2.png&quot; alt=&quot;生产者——消费者模型&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_producerandconsumer/thread-producerandconsumer3.png&quot; alt=&quot;生产者——消费者模型&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_producerandconsumer/thread-producerandconsumer4.png&quot; alt=&quot;生产者——消费者模型&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们可以看到这个的实现方式是通过wait和notifyAll或者notify来实现的，它们给实现了一种可以类似通知的效果，直到某一条件满足才通知线程资源有了，可以来进行争夺了。但是又会存在一个问题，我们对于通知的接收方是所有在该对象上加锁的线程或者是其中一个，但是我们对于线程的“精确”通知是无法做到的，不过从java5之后条件变量可以轻松做到。我们先来看下条件变量的定义：&lt;/p&gt;

&lt;blockquote&gt;条件变量就是表示条件的一种变量。但是必须说明，这里的条件是没有实际含义的，仅仅是个标记而已，并且条件的含义往往通过代码来赋予其含义&lt;/blockquote&gt;

&lt;p&gt;下面来看下例子吧，就拿上面的生产者-消费者来说，我们需要做的是在满仓的情况下只通知消费者消费，而在空仓的情况下只通知生产者生产，而不是上面例子中的所有线程。示例代码如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_producerandconsumer/thread-producerandconsumer5.png&quot; alt=&quot;生产者——消费者模型&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;总结来说一句：await、wait、notify、notifyll、signal、singnalll都必须在获取了对象锁之后才能使用，不然会报错。就如下面这样来写就会出现问题。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_producerandconsumer/thread-producerandconsumer6.png&quot; alt=&quot;生产者——消费者模型&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Sep 2014 17:23:00 +0800</pubDate>
        <link>https://zhou---jing.github.io/2014/09/01/thread-producerandconsumer/</link>
        <guid isPermaLink="true">https://zhou---jing.github.io/2014/09/01/thread-producerandconsumer/</guid>
        
        
      </item>
    
      <item>
        <title>JAVA多线程</title>
        <description>&lt;p&gt;多线程调度分为分时调度和抢占式调度，JVM线程调度采用抢占式调度方式，即根据线程的优先级来获取CPU的使用权（优先级只是概率上的区别）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_state/thread-state1.png&quot; alt=&quot;线程状态&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;yield：暂停当前的线程，即让出cpu并且此时当前线程变为可执行状态，它会让jvm线程调度器再次调度一次（而不是网上有些人所说的）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_state/thread-state2.png&quot; alt=&quot;线程状态&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面来通过实例来进行证明：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_state/thread-state3.png&quot; alt=&quot;线程状态&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们设置t2的优先级比t1的优先级低，那么如果按照上述所说的，在调用了yield方法之后，只允许相同优先级的线程执行，那么在t2调用一次yield之后并不能调度到t1（因为优先级的问题），那么不应该存在线程2到线程1的转换（除了线程2执行完成后），但是看结果：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_state/thread-state4.png&quot; alt=&quot;线程状态&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;则验证上述所说的是错误的。&lt;/p&gt;

&lt;p&gt;join：在当前调用该方法的线程执行完成之后，才能继续下面代码的执行。这样的方式可以实现线程的简单同步。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_state/thread-state5.png&quot; alt=&quot;线程状态&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/thread_state/thread-state6.png&quot; alt=&quot;线程状态&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当然我们还看到了join超时，其实意思就是“过了多少时间，你线程没有执行完，我就不等你了”，调用的api是join(long time)。&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Aug 2014 20:00:00 +0800</pubDate>
        <link>https://zhou---jing.github.io/2014/08/24/thread-states/</link>
        <guid isPermaLink="true">https://zhou---jing.github.io/2014/08/24/thread-states/</guid>
        
        
      </item>
    
      <item>
        <title>JAVA多线程</title>
        <description>&lt;h2 class=&quot;section-heading&quot;&gt;1):认识多任务、多进程、单线程、多线程&lt;/h2&gt;
&lt;p&gt;以前的DOS系统是单任务的，就是说计算机只能在同一时刻只能做一件事情（比如说听歌的时候不能修copy文件），而如今的操作系统都是多任务操作系统了，每个应用应用程序对应一个任务，而多任务的实现方式也是利用调度来实现多处理器的分配，事实上处理器在某一时刻只会给一件任务提供服务，而一个任务可以开启多个进程，并分别分配资源，而一个进程也可以创建多个线程，比如说JVM的进程，而线程的调度则是JVM的调度机制来实现的。&lt;/p&gt;

&lt;blockquote&gt;实际上，操作的系统的多进程实现了多任务并发执行，程序的多线程实现了进程的并发执行。&lt;/blockquote&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;2):java中的多线程&lt;/h2&gt;
&lt;h4 class=&quot;section-heading&quot;&gt;2.1):java线程的分类&lt;/h4&gt;
&lt;p&gt;java中线程分为两类：用户线程和守护线程，当然java对于它们之间的转换提供了api的，就是setDaemon，它允许用户设置线程为守护线程，注意的是线程设置必须在线程start之前执行，不然会报错。那么守护线程和用户线程之间存在什么区别呢？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a）：用户线程的离开会对jvm关闭存在影响，而守护线程不会，就是说如果用户线程都执行完成了（不论此时是否还有守护线程），jvm则会关闭。
&lt;/p&gt;
&lt;p&gt;b）：在daemon线程中创建的线程也是daemon的，而在用户线程创建的线程则是用户线程。那么守护线程的作用是什么？我们可以把它类比于Android中的service，它主要的功能就是为其他线程提供服务，比如说垃圾回收线程是一个守护线程，它的作用就是处理其他线程产生的垃圾。
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 class=&quot;section-heading&quot;&gt;2.2):java线程的创建&lt;/h4&gt;
&lt;p&gt;在java中存在三种方式创建线程：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a）：继承Thread类&lt;/p&gt;
&lt;p&gt;b）：实现Runnable接口&lt;/p&gt;
&lt;p&gt;c）：实现Callable接口&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;三者的区别在于：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a）：a无法继承其他类&lt;/p&gt;
&lt;p&gt;b）：b和c适合多个线程处理同一资源&lt;/p&gt;
&lt;p&gt;c）：c存在线程返回结果以及抛出异常&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;线程的优先级：线程创建的优先级默认是和创建该线程的优先级一样（包括守护线程）,还真是验证了那句谚语“龙生龙，凤生凤，老鼠的儿子会打洞”&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Jul 2014 20:00:00 +0800</pubDate>
        <link>https://zhou---jing.github.io/2014/07/08/thread-begin/</link>
        <guid isPermaLink="true">https://zhou---jing.github.io/2014/07/08/thread-begin/</guid>
        
        
      </item>
    
      <item>
        <title>关于SQL注入的类比</title>
        <description>&lt;p&gt;无意中看到一篇文章，讲到给不懂技术的人讲解SQL注入，作者使用了一个类比的例子来解释，个人觉得想法挺好的，所以在这里记录以下，并且加上自己的部分理解。&lt;/p&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;1）：SQL注入的类比&lt;/h3&gt;
&lt;p&gt;所谓SQL注入（SQL INJECTION），相信我们见名知意，就是利用某种方式注入SQL的一种攻击手段，达到某种对数据库进行直接操作的效果，下面我们来用一个机器人搬运箱子的例子来进行类比。&lt;/p&gt;

&lt;p&gt;我们想象这么个场景，自己是某个仓库的机器人，它的工作就是将仓库上的架子上的箱子进行搬运，但是它只能识别这样的指令（从_号架子上，取到_号箱子，然后放在传送带上），仓库管理员只需要输入几个数字就可以了，但是如果有恶意的用户如果输入的不是规范的值呢?比如它的输入命令是这样的——从3号架子上，取到4号箱子扔出窗子并且忽略本条命令的其他命令号箱子，这样机器人可能就会把4号箱子扔出了箱子。在实际的情况下，我们可能会是这样来进行注入的，比如我们写的这样的SQL——select * from  user where  username=“”，但是有可能我们输入的时候是“&#39;xx &#39;or 1=1”，最后达到的效果是select * from user where userame=&#39;xx&#39; or 1=1,这样我们的查询的就是所有User的信息了。
其实这样的方式主要是利用了数据和指令混合在一起了，让一些人有漏洞可以利用。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/sql_injection/sql_injection1.jpg&quot; alt=&quot;sql-injection&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;2)：SQL注入的预防&lt;/h3&gt;
&lt;p&gt;SQL注入的最根本的原因就是数据和指令混合在一起了，那么对于预防来说，我们就可以尽可能地将指令和数据进行分离开来。&lt;/p&gt;
&lt;h5 class=&quot;section-heading&quot;&gt;2.1)：对输入数据进行格式以及类型验证&lt;/h5&gt;

&lt;p&gt;对于一些以及确定了格式以及类型的数据输入，我们必须进行格式验证以及类型验证，总的来说就是：&lt;/p&gt;

&lt;blockquote&gt;只要是有固定格式的变量，在SQL语句执行前，应该严格按照固定格式去检查，确保变量是我们预想的格式。&lt;/blockquote&gt;

&lt;p&gt;不过很多时候我们可能需要输入评论、搜索这些的话 ，则需要过滤了。&lt;/p&gt;

&lt;h5 class=&quot;section-heading&quot;&gt;2.2)：过滤字符&lt;/h5&gt;
&lt;p&gt;对于某些输入来说，过滤掉一些关键字是有可能的，比如说“or”和“‘’”这些，但是有些时候这些方法是不可行的（查找一个博客网站中关于SQL注入的文章，则会样的话则不能进行“or”的过滤了）。&lt;/p&gt;

&lt;h5 class=&quot;section-heading&quot;&gt;2.3)：参数化查询&lt;/h5&gt;
&lt;p&gt;要说参数化查询，我们可以想象一下它的原理就是将数据在编译之前是用“？”（MYSQL环境）占位符来代替的，然后执行之前我们给这条语句传递了参数，但是这个参数并不能改变该SQL的语意，此时如果有指令也只能作为参数了。&lt;/p&gt;

&lt;p&gt;下面就举例说明：&lt;/p&gt;

&lt;p&gt;select * from user where username = ?，在编译为执行计划之后数据库系统知道这句话的语意是根据某个username查找user，如果我们传入参数为“xx or 1=1”,则此时的sql是重用上面的执行计划，但是or部分依旧是参数而不是指令，则此时的sql执行是select * from user where username = “xx or 1=1”。&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Jul 2014 23:02:00 +0800</pubDate>
        <link>https://zhou---jing.github.io/2014/07/01/sql-injection/</link>
        <guid isPermaLink="true">https://zhou---jing.github.io/2014/07/01/sql-injection/</guid>
        
        
      </item>
    
      <item>
        <title>Hadoop的起源思想</title>
        <description>&lt;p&gt;最近在看了下Hadoop，了解到Hadoop的起源Lucene——一个实现全文搜索功能的开源项目在实现此项目功能时候所遇到的一些问题，实现全文搜索功能在数据量不是很大的时候我们可以使用like进行数据库模糊查询，可是我们知道like的话则只能进行全文检索而不能利用索引，这样的话如果对于大数据量则会是个灾难，此时的作者遇到和Google搜索引擎一样的困难——如何快速进行全文搜索。所幸的是，Google在几篇论文中向世界介绍了它的思想，不久之后，作者花费了两年时间根据Google的思想完成了该项目。&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;1:全文搜索遇到的问题&lt;/h2&gt;
&lt;blockquote&gt;
	&lt;p&gt;1.1）大量网页如何存储&lt;/p&gt;
	&lt;p&gt;1.2）全文搜索的搜索算法&lt;/p&gt;
	&lt;p&gt;1.3）Page-Rank计算&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;2:Google的解决方案&lt;/h2&gt;
&lt;h4 class=&quot;section-heading&quot;&gt;2.1）大量网页如何存储&lt;/h4&gt;
&lt;p&gt;众所周知，Google的搜索肯定需要处理大量的网页数据，而这些网页的存储所耗费的资源是非常巨大的，而Google作为一家非常有思想的公司，他们的思想就是将这些文件利用集群进行存储，每个节点存储部分数据，达到蚂蚁搬象的效果，这就是GFS。&lt;/p&gt;

&lt;h4 class=&quot;section-heading&quot;&gt;2.2）全文搜索的搜索算法&lt;/h4&gt;
&lt;p&gt;对于大量网页的全文搜索，上面已经说到肯定不会使用Like进行查询，这时的Google则想出来了一个算法——倒排索引&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/hadoop_orignal/daopao_suoyin.png&quot; alt=&quot;倒排索引&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;它们的思想就是拿到一个网页之后对网页内容进行分词，每个词就是一个特征项，每个网页存在多个特征项，而每个特征项则会存在一个或者多个网页，然后我们根据特征项查找所有包含此特征项的网页，而且也能找到特征项在哪个位置。下面是一个示例，DocID是网页ID，TF是特征项在网页中的位置。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;/img/hadoop_orignal/daopai_suoyin2.png&quot; alt=&quot;倒排索引&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 class=&quot;section-heading&quot;&gt;2.3）Page-Rank计算&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/hadoop_orignal/page_rank1.png&quot; alt=&quot;Page_Rank&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;搜索查找到哪些网页是我们所需要的，但是此时我们需要知道哪些网页是相对而言是符合我们需求的，所以这时涉及到一个网页价值的计算问题。Google是根据每个网页被指向的次数来计算价值的，举个例子来说，这里有4个网页 指向关系如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/hadoop_orignal/page_rank2.png&quot; alt=&quot;Page_Rank&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们可以认为每个网页自身有价值为1，你指向了其他n的网页，则每个网页分得1/n的价值，所以此时的矩阵S为：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/hadoop_orignal/page_rank3.png&quot; alt=&quot;Page_Rank&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取得了矩阵S我们就可以求得矩阵G了，而网页的价值向量是当q&lt;next&gt;=q&lt;current&gt;*G的时候，我们可以认为此时的向量q是价值向量了，而且Google工程师会给q设置一个默认值q0，利用q0可以计算q1.....这样可以一直迭代，直到q&lt;next&gt;和q&lt;current&gt;差不多的时候.下面的问题就是如何计算q了,我们知道此时的数据量肯定是很大的，没有任何一台计算机可以独立完成此时的任务，所以Google的工程师们利用分而治之的思想——Map-Reduce。
现在我们来看下上式的计算过程：
&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/hadoop_orignal/page_rank4.png&quot; alt=&quot;Page_Rank&quot; /&gt;
&lt;/a&gt;

&lt;p&gt;我们取得了矩阵G之后，然后令q0（这个是默认值，可以根据需要进行调整）：&lt;/p&gt;
&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/hadoop_orignal/page-rank7.png&quot; alt=&quot;Page_Rank&quot; /&gt;
&lt;/a&gt;
&lt;p&gt;二者相乘得到新的矩阵 ，然后再次进行迭代直到迭代多次（这个也是可以进行调整的），得到该结果。&lt;/p&gt;
&lt;blockquote&gt;那么Google是如何进行对大量网页进行矩阵乘法的工作呢？&lt;/blockquote&gt;
&lt;p&gt;他们的想法是让每个节点负责部分计算，比如说节点1负责第一、二列，那么此列和q0中第一、二个数进行相乘得到一个4*2的向量，代表的意思是1、2号网页对1、2、3、4号网页的PR分别贡献多少，节点2负责第三、四列，那么此列和q0中第三、四个数进行相乘得到一个4*2的向量 ，代表的意思是3、4号网页对1、2、3、4号网页的PR分别贡献多少，然后将结果同意发到一个节点，得到一个4*4的向量，对每行进行想加就是q1，然后再次进行迭代；上面的分任务就是Map过程，而将结果发到节点进行整合则为Reduce。&lt;/p&gt;
&lt;p&gt;总的来说，Hadoop的很多思想都是从Google借鉴的，比如说BigTable（倒排索引中对关键字的以及网页的指向关系的存储，其实就是列式数据库），Map—Reduce就是Page-Rank算法中的思想，Hdfs则是GFS的山寨版。&lt;/p&gt;
&lt;/current&gt;&lt;/next&gt;&lt;/current&gt;&lt;/next&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Jun 2014 20:00:00 +0800</pubDate>
        <link>https://zhou---jing.github.io/2014/06/10/hadoop-orignal/</link>
        <guid isPermaLink="true">https://zhou---jing.github.io/2014/06/10/hadoop-orignal/</guid>
        
        
      </item>
    
  </channel>
</rss>
