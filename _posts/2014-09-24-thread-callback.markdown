---
layout:     post
title:      "JAVA多线程"
subtitle:   "Java线程间通信-异步回调的实现方式"
date:       2014-09-24 12:00:00
author:     "zhou---jing"
header-img: "img/post-bg-06.jpg"
---

<p>回调函数的实现方式其实就是利用的线程间的通讯，一般的模式是存在两个线程，一个主线程以及一个子线程，子线程完成操作后再执行定义的回调函数。而根据不同的场景我们可以对回调函数实现方式进行简单分类:</p>

<blockquote>
<p>a）:同一时刻只有一个实例需要进行回调处理</p>
<p>b）:同一时刻只有多个实例需要进行回调处理</p>
</blockquote>

<p>下面我们看下例子：</p>
<a href="#">
    <img src="{{ site.baseurl }}/img/thread_callback/thread-callback1.png" alt="回调函数">
</a>

<p>而此时的思想就是通过一个子线程执行异步操作，然后调用已经实现回调接口的方法，从而达到回调。那么如果存在多个实例想要关注此业务呢？我们当然可以类似于上面通过开启多个子线程来实现，但是这样的话对于资源的浪费是很大的（也不说此时的业务的一致性（即每个子线程关注的是同一个业务，但是资源都是新开辟的，因为都是新开的线程）），其实此时的解决方法很简单，看上面的描述的话就是一个“一”和“多”的区别，“一”是用单个对象来保存的，那么“多”我们就可以使用数组或者什么的来进行存储就可以了。</p>

<a href="#">
    <img src="{{ site.baseurl }}/img/thread_callback/thread-callback2.png" alt="回调函数">
</a>

<p>其实多个实例需要回调也就是加上了个List进行存储而已，当然这种方式也可以满足一个实例进行回调的情况，只是觉得写起来有点大材小用了。但是这样会存在一个小问题，就是我们不能每时每刻添加异步回调任务，其实解决这个问题很简单，我们如果需要每时每刻都可以添加任务，则需要让子线程一直循环。</p>

<a href="#">
    <img src="{{ site.baseurl }}/img/thread_callback/thread-callback3.png" alt="回调函数">
</a>
<p>总结来说，其实很多地方的回调都是使用的这样一种方式，比如Ajax的回调、Android的消息机制，这些或多或少都会使用到这样的一种方式。</p>
